# Personal snippets

global !p
def to_cml( s ):
	return "".join( w.title() for w in s.split('_') )
endglobal

snippet clim "class _impl* (class)"
class ${1:`!p snip.rv = to_cml( snip.basename ) or "name"`} {
public:
	/**
	 * Constructs a new ${1/(\w+).*/$1/} object.
	 */
	${1/(\w+).*/$1/}();
	/**
	 * Copy constructor.
	 */
    ${1/(\w+).*/$1/}( const ${1/(\w+).*/$1/}& rhs );
	/**
	 * Move constructor.
	 */
	${1/(\w+).*/$1/}( ${1/(\w+).*/$1/}&& rhs );
	/**
	 * Assignment operator.
	 */
	${1/(\w+).*/$1/}& operator=( ${1/(\w+).*/$1/} rhs );

	$0

	/**
	 * Destructor.
	 */
	virtual ~${1/(\w+).*/$1/}();
	/**
	 * Swaps the contents of first with second.
	 * @param first Object to be swapped with second.
	 * @param second Object to be swapped with first.
	 */
	friend void swap(
			${1/(\w+).*/$1/}& first,
			${1/(\w+).*/$1/}& second ) noexcept;
private:
	struct Impl;
	std::unique_ptr<Impl> _impl;
};
endsnippet

snippet cclim "class _impl* (src)" b
struct ${1:`!p snip.rv = to_cml( snip.basename ) or "name"`}::Impl {
	Impl()
	{
	}
	Impl( const Impl& rhs )
	{
	}

	$0
};

$1::$1()
		: _impl( new Impl() )
{
}
$1::$1( const $1& rhs )
		: _impl( new Impl( *( rhs._impl ) )
{
}
$1::$1( $1&& rhs )
{
	swap( *this, rhs );
}
$1& $1::operator=( $1 rhs )
{
	swap( *this, rhs );
	return *this;
}

$1::~$1() {}

void swap( ${1/(\w+).*/$1/}& first, ${1/(\w+).*/$1/}& second )
{
	using std::swap;
	swap( first._impl, second._impl );
}
endsnippet

snippet mvgs "getter and move setter" b
/**
 * Gets ${2:member}.
 */
${1:MemberType} $2() const;
/**
 * Sets $2.
 * @param ${3:$2} Object to assign to $2.
 */
void $2( $1 $3 );

$0
endsnippet

snippet cmvgs "getter and move setter (src)" b
${1:MemberType} ${2:Class}::${3:member}() const
{
	return _impl->_${4:$3};
}
void $2::$3( $1 $4 )
{
	_impl->_$4 = std::move( $4 );
}

$0
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`} {
	$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

# vim:ft=snippets:
